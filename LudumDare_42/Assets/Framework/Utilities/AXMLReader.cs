/*
 * Vers.: 1.0
 * Made by Andre Schaan (Unity 3D programmer)
 * This classe is part of Vox's Framework
 
*/

using UnityEngine;
using System.Collections;
using System.Xml;
using System.Collections.Generic;


/// <summary>
/// XML reader.
/// </summary>
/// <remarks>
/// This class helps you to read simple xml files, like the one we use for atlas.<BR>
/// How this class works?<BR>
/// You load a TextAsset (Unity3D call every file, that is not in binary mode, a TextAsset), after that you call the AXMLReader.GetTagList method asking for a tag. This method will return all tags in the XML with the same name as you asked for.<BR>
/// But what is a tag?<BR>
/// Here is one of the XML generated by a TexturePacker when it generates an atlas (note that after unity 4.0 we dont have to use atlas manually anymore).<BR>
/// <code>
/// <sprite n="btn_vehicles" x="0" y="787" w="221" h="73"/>
/// <sprite n="btn_vehicles_disabled" x="799" y="799" w="221" h="73"/>
/// <sprite n="btn_vehicles_selected" x="578" y="727" w="221" h="73"/>
/// <sprite n="btn_weapons" x="799" y="726" w="221" h="73"/>
/// <sprite n="btn_weapons_disabled" x="578" y="653" w="221" h="74"/>
/// <sprite n="btn_weapons_selected" x="799" y="653" w="221" h="73"/>
/// </code>
/// As you can see, it describe the location of 6 images in the atlas.<BR>
/// You can see that there are 6 TAGs called "sprite", each one have 5 ATTRIBUTES (n, x, y, w, h) that describes the image name, its location in the atlas and its dimensions.<BR>
/// When you try to read a XML like that with this class you can easly do this:<BR>
/// <code>
/// 	//Get all tags with name "sprite" in the xml
///		List<AXMLReader.XMLTag> __xmlTagList = AXMLReader.GetTagList((TextAsset)Resources.Load("path/to/xml/in/resources/folder", "sprite");
/// 
///		//Now we gonna loop in the tags we have collected from the XML file looking for the "btn_weapons" we have seen in this example.
///		for(int i = 0; i < __xmlTagList.Count; i++)
///		{
///			if(__xmlTagList[i].GetAttribute("n") == "btn_weapons")
///			{
///         	//When we found it, we will get its dimensions and save it in a rect.
///				Rect __rect = new Rect(	float.Parse(__xmlTagList[i].GetAttribute("x")), 
///										float.Parse(__xmlTagList[i].GetAttribute("y")), 
///										float.Parse(__xmlTagList[i].GetAttribute("w")), 
///										float.Parse(__xmlTagList[i].GetAttribute("h")));
///				break;
///			}
///		} 
/// </code>
/// </remarks>
public class AXMLReader
{
	/// <summary>
	/// XML tag
	/// </summary>
	/// <remarks>
	/// This class holds a TAG from a XML file.<BR>
	/// You can use it to have acces to XML's tag attributes.
	/// </remarks>
    public class XMLTag 
    {
        private XmlElement xmlElement;
		
        public XMLTag(XmlElement p_xmlElement)
        {
            xmlElement = p_xmlElement;
        }

        public string GetAttribute(string p_attribute)
        {
            return xmlElement.Attributes[p_attribute].InnerText;
        }
    }
	
	static public List<XMLTag> GetTagList(TextAsset p_xml, string p_tagName)
    {
        XmlDocument xmlDoc = new XmlDocument();
        xmlDoc.LoadXml(p_xml.text);

        XmlNodeList tagList = xmlDoc.GetElementsByTagName(p_tagName);
        if(tagList == null) Debug.LogError("Dont find the tag = " + p_tagName);

        List<XMLTag> _listTags = new List<XMLTag>();
        for (int i = 0; i < tagList.Count; i++)
        {
            _listTags.Add(new XMLTag((XmlElement)tagList[i]));
        }

        return _listTags;
    }
	
	static public List<XMLTag> GetTagList(string p_xml, string p_tagName)
    {
        XmlDocument xmlDoc = new XmlDocument();
        xmlDoc.LoadXml(p_xml);

        XmlNodeList tagList = xmlDoc.GetElementsByTagName(p_tagName);
        if(tagList == null) Debug.LogError("Dont find the tag = " + p_tagName);

        List<XMLTag> _listTags = new List<XMLTag>();
        for (int i = 0; i < tagList.Count; i++)
        {
            _listTags.Add(new XMLTag((XmlElement)tagList[i]));
        }

        return _listTags;
    }
	
	/*/// <summary>
	/// Gets the a tag list from a XML file.
	/// </summary>
	/// <returns>
	/// The tag list.
	/// </returns>
	/// <param name='p_xml'>
	/// XML file (as a TextAsset object).
	/// </param>
	/// <param name='p_tagName'>
	/// The name of the tags you want from the XML.
	/// </param>
    static public List<XMLTag> GetTagList(TextAsset p_xml, string p_tagName)
    {
       GetTagList(p_xml.text, p_tagName);
    }
	
	/// <summary>
	/// Gets the a tag list from a XML file.
	/// </summary>
	/// <returns>
	/// The tag list.
	/// </returns>
	/// <param name='p_xml'>
	/// XML file (as a TextAsset object).
	/// </param>
	/// <param name='p_tagName'>
	/// The name of the tags you want from the XML.
	/// </param>
    static public List<XMLTag> GetTagList(string p_text, string p_tagName)
    {
        XmlDocument xmlDoc = new XmlDocument();
        xmlDoc.LoadXml(p_text);

        XmlNodeList tagList = xmlDoc.GetElementsByTagName(p_tagName);
        if(tagList == null) Debug.LogError("Dont find the tag = " + p_tagName);

        List<XMLTag> _listTags = new List<XMLTag>();
        for (int i = 0; i < tagList.Count; i++)
        {
            _listTags.Add(new XMLTag((XmlElement)tagList[i]));
        }

        return _listTags;
    }*/
}
